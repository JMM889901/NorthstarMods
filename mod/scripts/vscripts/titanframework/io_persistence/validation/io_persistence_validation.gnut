globalize_all_functions
bool function ValidPersistentPassiveForLoadout(string name, string property, TitanLoadoutDef validatedLoadout)
{
    string titanClass = validatedLoadout.titanClass
    if(shouldPrintDevStuff())
        print("titanclass "+titanClass)
	if(!ItemDefined(name))
	{
		if(shouldPrintDevStuff())
			print("item not defined "+name)
		return false
	}
	int itemType = GetItemType(name)
	if( IsBaseTitan(validatedLoadout.titanClass) )
	{
		int WantedType
		switch(property)
		{
			case "passive4":
				WantedType = eItemTypes.TITAN_UPGRADE1_PASSIVE
				break
			case "passive5":
				WantedType = eItemTypes.TITAN_UPGRADE2_PASSIVE
				break
			case "passive6":
				WantedType = eItemTypes.TITAN_UPGRADE3_PASSIVE
		        break
			default:
				WantedType = GetModdedTitanLoadoutPassiveTypeByClass(validatedLoadout.titanClass, property)
		}
		return itemType == WantedType
	}
    return itemType == GetModdedTitanLoadoutContextualPassiveTypeByContext(validatedLoadout, property) // More advaced version that can account for passives which are influenced by other values
}

#if !SERVER
string function GetCorrectCamoProperty( string loadoutProperty ) //HACK HACK: should fix dependency between skin and camo index on UI side. Remove when done.
{
	string returnValue
	switch( loadoutProperty )
	{
		case "skinIndex":
			returnValue = "camoIndex"
			break

		case "primeSkinIndex":
			returnValue = "primeCamoIndex"
			break

		case "primarySkinIndex":
			returnValue = "primaryCamoIndex"
			break

		case "secondarySkinIndex":
			returnValue = "secondaryCamoIndex"
			break

		case "weapon3SkinIndex":
			returnValue = "weapon3CamoIndex"
			break

		default:
			unreachable
	}

	return returnValue
}
#endif
bool function ValidDecalProperty(string name, string property, TitanLoadoutDef validatedLoadout )
{
	string titanClass = validatedLoadout.titanClass
	if(GetModdedTitanClasses().contains(titanClass))
		titanClass = GetModdedTitanClassForMods(titanClass)
	return ( GetNoseArtRefFromTitanClassAndPersistenceValue( titanClass , name.tointeger() ) != INVALID_REF )
}
bool function ValidSkinCamoPair(string name, string property, TitanLoadoutDef validatedLoadout)
{

	bool isSkinIndex = false
	switch( property  )
	{
		case "skinIndex":
		case "primeSkinIndex":
		case "primarySkinIndex":
		case "secondarySkinIndex":
		case "weapon3SkinIndex":
			isSkinIndex = true
			break
	}

	if ( !isSkinIndex )
		return true

    string camoProperty = GetCorrectCamoProperty( property )
	int camoIndexValue = GetTitanLoadoutValue(validatedLoadout, camoProperty).tointeger()
    int valueAsInt = name.tointeger()
    switch(property)
    {
        case "skinIndex":
        {
            if ( valueAsInt == TITAN_SKIN_INDEX_CAMO ) //This is a camo skin
            {
                if ( camoIndexValue <= CAMO_INDEX_BASE )
                {
                    SetTitanLoadoutValue(validatedLoadout, property, "0")
                    SetTitanLoadoutValue(validatedLoadout, camoProperty, "0")
                    return true
                }
            }
            else //i.e. this is a warpaint
            {
                SetTitanLoadoutValue(validatedLoadout, camoProperty, "0")
                return true
            }
            break
        }
        case "primeSkinIndex": //switching between prime and non-prime doesn't have problems where skin is unlocked on non-prime but is locked on prime, so no need to return false
		{
			if ( valueAsInt == TITAN_SKIN_INDEX_CAMO && camoIndexValue <= CAMO_INDEX_BASE )
			{
                SetTitanLoadoutValue(validatedLoadout, property, "0")
                SetTitanLoadoutValue(validatedLoadout, camoProperty, "0")
				return true
			}
            return true//Fuck it i dont care just always accept 
		}
		case "primarySkinIndex":
		{
			if ( valueAsInt == WEAPON_SKIN_INDEX_CAMO )
			{
				if ( camoIndexValue <= CAMO_INDEX_BASE )
				{
                    SetTitanLoadoutValue(validatedLoadout, property, "0")
                    SetTitanLoadoutValue(validatedLoadout, camoProperty, "0")
					return true // HACK: Work around fact that when we switch weapons we don't do a corresponding call to set camo and skin indexes
				}
			}
			else
			{
                SetTitanLoadoutValue(validatedLoadout, camoProperty, "0")
                return true
			}

			break
		}
    }
    return false
}
bool function IsValidSetFile(string name, string property, TitanLoadoutDef validatedLoadout)
{
	switch(name)
	{
		case "titan_ogre_meteor":
		case "titan_ogre_minigun":
		case "titan_stryder_leadwall":
		case "titan_stryder_sniper":
		case "titan_atlas_stickybomb":
		case "titan_atlas_vanguard":
		case "titan_atlas_tracker":
		case "titan_atlas_tone_prime":
		case "titan_atlas_ion_prime":
		case "titan_ogre_scorch_prime":
		case "titan_ogre_legion_prime":
		case "titan_stryder_ronin_prime":
		case "titan_stryder_northstar_prime":
		    return true
		default:
		    return false
	}	
	return false
}
bool function ValidPilotLoadoutValue(string name, string property) //This is strictly a none-ordered check, meaning we cant rely on other values for validation, attachments must be handled in ValidPilotLoadoutAttachment
{
	if(!IsValidPilotLoadoutProperty(property))
		return false
	if( IsSubItemType(GetItemTypeFromPilotLoadoutProperty(property)) )
	{
		if( name == "null" || name == "none" )
			return true
		if(!ItemDefined(name))
			return false
		return GetItemType(name) == GetItemTypeFromPilotLoadoutProperty(property) || GetItemType(name) == eItemTypes.SUB_PILOT_WEAPON_MOD
	}
	if(!ItemDefined(name))
		return false
	int itemType = GetItemType(name)
	return itemType == GetItemTypeFromPilotLoadoutProperty(property)
}
bool function ValidPilotLoadoutAttachment(string item, string property, string parentRef)
{//Cant pass loadout because errrrrrrrr stored as table and i dont want or need to
	if(!IsValidPilotLoadoutProperty(property))
		return false
	if( IsSubItemType(GetItemTypeFromPilotLoadoutProperty(property)) )
	{ //Duplicate checks just in case
		if( item == "null" || item == "none" )
			return true
		if(!ItemDefined(item))
			return false
		if( !HasSubitem( parentRef, item ) )
			return false
		return GetItemType(item) == GetItemTypeFromPilotLoadoutProperty(property) || GetItemType(item) == eItemTypes.SUB_PILOT_WEAPON_MOD
	}
	return false //This should never happen, this should only be called on subitems
	//i COULD combine the check for duplicate attachments in here, but i dont want to
}
array<string> modTypes = ["Mod1", "Mod2", "Mod3", "SkinIndex", "CamoIndex"]
bool function ValidPilotWeaponAttchmentCombination( string parentRef, array<string> mods, string attachment = "" )
{
	if( !ItemDefined( parentRef ) )
		return false
	if( mods.contains("pro_screen") )
		mods.remove(mods.find("pro_screen")) //Probably need extra stuff later but idk
	if(mods.len() > 2)
		return false //dont see how this is even possible unless maybe they used something where pro_screen should go
	
	foreach(string mod in mods)
	{
		int count = 0// I dont think i need to check for none/null because i think that would be caught by the other checks
		foreach( string mod2 in mods )
		{
			if( mod == mod2 )
				count++
		}
		if( count > 1 )
			return false //Duplicate mods
			//There are better ways but like, i dont want to
		
	}
	if(attachment == "threat_scope")
	{
		if(mods.len() > 1)
			return false //Only one attachment allowed
	}
	return true
}
void function ValidatePilotTableForWeapons(frameworkPilotLoadoutOverrides loadout)
{
	array<string> mods
    string attachment
    foreach(string key, string value in loadout.loadout )
    {
        switch(key)
        {
            case "primary":
            case "secondary":
            case "weapon3":
                foreach(string modType in modTypes)
                {
                    if( key + modType in loadout.loadout )
                    {
                        string weapon = value
                        attachment = loadout.loadout[key + modType]
                        if(  !ValidPilotLoadoutAttachment(attachment, key+modType, weapon ) )
                            loadout.loadout[key+modType] <- "none"
                        mods.append(attachment)
                    }
                    if(!ValidPilotWeaponAttchmentCombination(value, mods) )
                    {
                        loadout.loadout[key+modType] <- "none" // i could do this once at the end but this way is a bit more seamless
                        mods.remove(mods.len()-1)
                    }
                }
            case "primary":
                if( !(key + "Attachment" in loadout.loadout) )
                    continue
                string weapon = value
                attachment = loadout.loadout["primaryAttachment"]
                if(  !ValidPilotLoadoutAttachment(attachment, "primaryAttachment", weapon ) )
                    loadout.loadout["primaryAttachment"] <- "none"
                if(!ValidPilotWeaponAttchmentCombination(value, mods, attachment) )
                    loadout.loadout["primaryAttachment"] <- "none" 
                

        }
    }//TODO: I need to add a function later down the line to handle vanilla guns with modded attachments
}
bool function propertyDoesNotRequireValidation(string name, string property, TitanLoadoutDef validatedLoadout)
{
    return true//This function is used where they dont, not to check if they dont, this is not a stub this is just the entire function
}
table<string, bool functionref(string value, string property, TitanLoadoutDef validatedLoadout)> function getBaseLoadoutValidationTable()
{
    table <string, bool functionref(string value, string property, TitanLoadoutDef validatedLoadout) > validationTable
    validationTable["passive1"] <- ValidPersistentPassiveForLoadout
    validationTable["passive2"] <- ValidPersistentPassiveForLoadout
    validationTable["passive3"] <- ValidPersistentPassiveForLoadout
    validationTable["passive4"] <- ValidPersistentPassiveForLoadout
    validationTable["passive5"] <- ValidPersistentPassiveForLoadout
    validationTable["passive6"] <- ValidPersistentPassiveForLoadout
	validationTable["titanExecution"] <- ValidPersistentPassiveForLoadout
    validationTable["skinIndex"] <- ValidSkinCamoPair
    validationTable["camoIndex"] <- ValidSkinCamoPair
	validationTable["decalIndex"] <- ValidDecalProperty
    validationTable["primeSkinIndex"] <- ValidSkinCamoPair
    validationTable["primeCamoIndex"] <- ValidSkinCamoPair
    validationTable["primeDecalIndex"] <- ValidDecalProperty
    validationTable["primarySkinIndex"] <- ValidSkinCamoPair
    validationTable["primaryCamoIndex"] <- ValidSkinCamoPair
    validationTable["showArmBadge"] <- propertyDoesNotRequireValidation
	validationTable["isPrime"] <- propertyDoesNotRequireValidation

    return validationTable
}