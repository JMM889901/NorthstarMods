untyped
globalize_all_functions
void function UpdateFrameworkTitanXP( var panel, frameworkPersistentTitanLoadout titan, bool useWeaponHints = true )
{
	var elem
	var rui
	entity player = GetUIPlayer()

	if ( player == null )
		return

	TitanLoadoutDef loadout = titan.loadout

	elem = Hud_GetChild( panel, "TitanLevelPips" )
	rui = Hud_GetRui( elem )
	string titanClass = loadout.titanClass 
	//int xp = FrameworkTitanGetXP( player, titanClass )
	//RuiSetInt( rui, "numPips", TitanGetNumPipsForXP( titanClass, xp ) )
	//RuiSetInt( rui, "numFilledPips", TitanGetFilledPipsForXP( titanClass, xp ) )

    Hud_Show( elem )

	elem = Hud_GetChild( panel, "TitanName" )
	elem.SetText( GetTitanLoadoutName( loadout ) )

	elem = Hud_GetChild( panel, "TitanCurrentLevel" )


    //elem.SetText( "#HUD_TITAN_LEVEL", FrameworkTitanGetDisplayGenAndLevelForXP( titanClassPersist, xp ) )
    Hud_SetColor( elem, 255, 255, 255, 255 )


	Signal( uiGlobal.signalDummy, "CycleWeaponLoadouts" )
	elem = Hud_GetChild( panel, "TitanHint" )
	Hud_EnableKeyBindingIcons( elem )
	Hud_SetAlpha( elem, 200 )
	if ( useWeaponHints )
	{
		string text = GetHintForTitanLoadout( loadout )
		if(text == "")
			text = Localize(GetHintForModdedTitanLoadout(loadout.name))
		elem.SetText( text )
		thread CycleWeaponLoadouts( elem, loadout )
	}
	else
		elem.SetText( GetItemLongDescription( titanClass ) )

	if ( Hud_HasChild( panel, "TitanDifficultyDisplay" ) )
	{
		elem = Hud_GetChild( panel, "TitanDifficultyDisplay" )
		rui = Hud_GetRui( elem )
		RuiSetInt( rui, "numFilledPips", loadout.difficulty )
	}

	if ( Hud_HasChild( panel, "HintIcon" ) )
	{
		elem = Hud_GetChild( panel, "HintIcon" )
		rui = Hud_GetRui( elem )
		RuiSetImage( rui, "basicImage", GetItemImage( titanClass ) ) //TODO FOR TITAN ICONS
	}

	if ( Hud_HasChild( panel, "UpgradeIcon" ) )
	{
		elem = Hud_GetChild( panel, "UpgradeIcon" )
		rui = Hud_GetRui( elem )
		RuiSetImage( rui, "basicImage", $"rui/titan_loadout/core/titan_core_vanguard" )
	}

	if ( Hud_HasChild( panel, "TitanDurabilityDisplay" ) )
	{
		elem = Hud_GetChild( panel, "TitanDurabilityDisplay" )
		rui = Hud_GetRui( elem )
		RuiSetInt( rui, "numFilledPips", GetTitanStat( titanClass, eTitanStatType.HEALTH ) )
	}

	if ( Hud_HasChild( panel, "TitanDamageDisplay" ) )
	{
		elem = Hud_GetChild( panel, "TitanDamageDisplay" )
		rui = Hud_GetRui( elem )
		RuiSetInt( rui, "numFilledPips", GetTitanStat( titanClass, eTitanStatType.DAMAGE ) )
	}

	if ( Hud_HasChild( panel, "TitanMobilityDisplay" ) )
	{
		elem = Hud_GetChild( panel, "TitanMobilityDisplay" )
		rui = Hud_GetRui( elem )
		RuiSetInt( rui, "numFilledPips", GetTitanStat( titanClass, eTitanStatType.SPEED ) )
	}
}
void function setupPassiveButtonIconsForPassiveArray(array<var> buttons, array<ItemData> passives, string parentRef)
{
    
}
var function setupPassiveButtonIconForPassive(var button, ItemDisplayData passive, string parentRef, string itemSlot)
{
    bool modded = ModdedTitanPassiveHasCustomAssets(parentRef, itemSlot)
    int itemType = passive.itemType
    string itemRef = passive.ref
    //asset image = GetImage( itemType, itemRef )
    var passiveImage 
    var passiveButton
    if(modded)
    {
        passiveImage = Hud_GetChild(button, "PassiveImage")
        passiveButton = Hud_GetChild(button, "PassiveButton")
        Hud_Hide(Hud_GetChild(button, "FullButton"))
		Hud_Show(passiveImage)
    }
    else
    {
        passiveImage = Hud_GetChild(button, "FullButton")
        passiveButton = Hud_GetChild(button, "FullButton")
        Hud_Hide(Hud_GetChild(button, "PassiveImage"))
        Hud_Hide(Hud_GetChild(button, "PassiveButton"))
    }

	Hud_Show(passiveButton)
    var passiveRui = Hud_GetRui(passiveImage)
    RuiSetImage(passiveRui, "buttonImage", passive.image)
    return passiveButton
}
var function setupPassiveButtonIconForImageAndIsModded(var button, asset image, bool modded)
{
	var passiveImage 
	var passiveButton
	if(modded)
	{
		passiveImage = Hud_GetChild(button, "PassiveImage")
		passiveButton = Hud_GetChild(button, "PassiveButton")
		Hud_Hide(Hud_GetChild(button, "FullButton"))
		Hud_Show(passiveImage)
	}
	else
	{
		passiveImage = Hud_GetChild(button, "FullButton")
		passiveButton = Hud_GetChild(button, "FullButton")
		Hud_Hide(Hud_GetChild(button, "PassiveImage"))
		Hud_Hide(Hud_GetChild(button, "PassiveButton"))
	}

	Hud_Show(passiveButton)
	var passiveRui = Hud_GetRui(passiveImage)
	RuiSetImage(passiveRui, "buttonImage", image)
	return passiveButton
}